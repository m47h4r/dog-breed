{"version":3,"sources":["components/Link.js","components/Header.js","config/index.js","components/Breed.js","pages/List.js","pages/Quiz.js","pages/Index.js","App.js","serviceWorker.js","index.js"],"names":["Link","children","props","className","headerData","id","url","text","Header","currentPage","map","link","to","key","config","api","breedListURL","breedImageURLPrefix","breedImageURLSuffix","Breed","name","useReducer","state","action","type","imageURLsLength","imageURLs","message","length","newImageIndex","currentImageIndex","data","useBreedReducer","dispatch","useEffect","fetch","then","response","json","data-testid","data-image-number","onClick","style","backgroundImage","List","breedList","useDogReducer","console","log","Object","keys","breed","Quiz","Index","App","basename","process","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.df772e90.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\n\nimport \"./Link.css\";\n\nfunction Link({ children, ...props }) {\n  return (\n    <RouterLink className=\"link\" {...props}>\n      {children}\n    </RouterLink>\n  );\n}\n\nexport default Link;\n","import React from \"react\";\n\nimport \"./Header.css\";\n\nimport Link from \"./Link\";\n\nconst headerData = [\n  { id: \"index\", url: \"/\", text: \"Home\" },\n  { id: \"list\", url: \"/list\", text: \"Breed List\" },\n  { id: \"quiz\", url: \"/quiz\", text: \"Breed Quiz\" },\n];\n\nfunction Header({ currentPage }) {\n  return (\n    <nav className=\"navigation\">\n      {headerData.map((link) =>\n        currentPage !== link.id ? <Link to={link.url} key={link.id}>{link.text}</Link> : null\n      )}\n    </nav>\n  );\n}\n\nexport default Header;\n","const config = {\n    api: {\n        breedListURL: 'https://dog.ceo/api/breeds/list/all',\n        breedImageURLPrefix: 'https://dog.ceo/api/breed/',\n        breedImageURLSuffix: \"/images\"\n    }\n}\n\nexport default config;\n","import React, { useEffect, useReducer } from \"react\";\n\nimport \"./Breed.css\";\n\nimport config from \"../config\";\n\nexport function useBreedReducer() {\n  const initState = {\n    currentImageIndex: -1,\n    imageURLs: null,\n  };\n\n  const [state, dispatch] = useReducer(reducer, initState);\n\n  function reducer(state, action) {\n    switch (action.type) {\n      case \"INCREMENT-IMAGE-INDEX\": {\n        const imageURLsLength = state.imageURLs.message.length;\n        let newImageIndex = -1;\n        if (+state.currentImageIndex === +imageURLsLength - 1) {\n          newImageIndex = 0;\n        } else {\n          newImageIndex = state.currentImageIndex + 1;\n        }\n        return { ...state, currentImageIndex: newImageIndex };\n      }\n      case \"SET-IMAGE-URLS\": {\n        return { ...state, imageURLs: action.data };\n      }\n      default:\n        return { ...state };\n    }\n  }\n\n  return [state, dispatch];\n}\n\nfunction Breed({ name }) {\n  const [state, dispatch] = useBreedReducer();\n\n  useEffect(() => {\n    fetch(\n      config.api.breedImageURLPrefix + name + config.api.breedImageURLSuffix\n    )\n      .then((response) => response.json())\n      .then((data) => dispatch({ type: \"SET-IMAGE-URLS\", data: data }));\n  }, [dispatch, name]);\n\n  return (\n    <button\n      className=\"breed\"\n      data-testid=\"breed-button\"\n      data-image-number={state.currentImageIndex}\n      onClick={() => dispatch({ type: \"INCREMENT-IMAGE-INDEX\" })}\n      style={{\n        backgroundImage: `url(${\n          state.imageURLs !== null\n            ? state.currentImageIndex !== -1\n              ? state.imageURLs.message[state.currentImageIndex]\n              : \"none\"\n            : \"none\"\n        })`,\n      }}\n    >\n      <div\n        className={\n          state.currentImageIndex !== -1 ? \"name name--readable\" : \"name\"\n        }\n      >\n        {name}\n      </div>\n    </button>\n  );\n}\n\nexport default Breed;\n","import React, { useEffect, useReducer } from \"react\";\n\nimport \"./List.css\";\n\nimport Header from \"../components/Header\";\nimport Breed from \"../components/Breed\";\n\nimport config from \"../config\";\n\nfunction useDogReducer() {\n  const initState = {\n    breedList: null,\n  };\n\n  const [state, dispatch] = useReducer(reducer, initState);\n\n  function reducer(state, action) {\n    switch (action.type) {\n      case \"SET-BREEDLIST\":\n        return { ...state, breedList: action.data };\n      default:\n        return { ...state };\n    }\n  }\n\n  return [state, dispatch];\n}\n\nfunction List() {\n  const [state, dispatch] = useDogReducer();\n\n  useEffect(() => {\n    console.log(' i am in use effect of the list component ')\n    fetch(config.api.breedListURL)\n      .then((response) => response.json())\n      .then((data) => dispatch({ type: \"SET-BREEDLIST\", data: data }));\n  }, [dispatch]);\n\n  return (\n    <>\n      <Header currentPage=\"list\" />\n      <div className=\"breed-wrapper\">\n        {state.breedList\n          ? Object.keys(state.breedList.message).map((breed) => (\n              <Breed name={breed} />\n            ))\n          : null}\n      </div>\n    </>\n  );\n}\n\nexport default List;\n","import React from \"react\";\n\nimport Header from \"../components/Header\";\n\nfunction Quiz () {\n  return (\n    <>\n      <Header currentPage=\"quiz\" />\n      <p>i am the BreedQuiz component</p>\n    </>\n  );\n}\n\nexport default Quiz;\n","import React from \"react\";\n\nimport \"./Index.css\";\n\nimport Header from \"../components/Header\";\n\nfunction Index() {\n  return (\n    <div className=\"index-wrapper\">\n      <Header currentPage=\"index\"/>\n    </div>\n  );\n}\n\nexport default Index;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport List from \"./pages/List\";\nimport Quiz from \"./pages/Quiz\";\nimport Index from \"./pages/Index\";\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path=\"/list\">\n          <List />\n        </Route>\n        <Route path=\"/quiz\">\n          <Quiz />\n        </Route>\n        <Route exact path=\"/\">\n          <Index />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}